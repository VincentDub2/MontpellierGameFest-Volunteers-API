datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id          String  @id @default(uuid())
  lastName    String?
  firstName   String
  email       String  @unique
  address     String?
  picture     String?
  pictureId   String?
  phoneNumber String?
  completed   Boolean @default(false)
  isGod       Boolean @default(false)

  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  emailVerified          Boolean              @default(false)
  emailVerificationToken String? // Un token unique pour la vérification d'email
  // Relations
  authLocal              AuthLocal?
  authOAuth              AuthOAuth[]
  passwordResetTokens    PasswordResetToken[]

  isVolunteer      IsVolunteer[]
  isPresent        IsPresent[]
  isReferent       IsReferent[]
  inscriptions     Inscription[]
  userAssociations UserAssociation[]
  managedEvents    Event[]           @relation("manager")
}

model AuthLocal {
  id             String    @id @default(uuid())
  hashedPassword String
  salt           String
  failedAttempts Int       @default(0)
  lockUntil      DateTime? // Verrouillage du compte jusqu'à cette date

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthOAuth {
  id             String  @id @default(uuid())
  providerId     String
  provider       String
  providerUserId String
  accessToken    String  @db.VarChar(500)
  refreshToken   String?
  userId         String
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasswordResetToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  userId String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Festival {
  idFestival  Int           @id @default(autoincrement())
  name        String
  address     String
  city        String
  postalCode  String
  country     String
  isActive    Boolean       @default(true)
  dateDebut   DateTime
  dateFin     DateTime
  isVolunteer IsVolunteer[]
  creneaux    Creneau[]
  postes      Poste[]
  isPresent   IsPresent[]
  isPlay      IsPlay[]
}

model IsVolunteer {
  idFestival   Int
  idUser       String
  isVege       Boolean
  sizeTeeShirt String
  role         Role
  festival     Festival @relation(fields: [idFestival], references: [idFestival], onDelete: Cascade)
  user         User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  Jeux         Jeux?    @relation(fields: [jeuxIdGame], references: [idGame])
  jeuxIdGame   Int?

  @@id([idUser, idFestival]) // Un volontaire ne peut pas être inscrit deux fois au même festival
  @@index([idUser])
  @@index([idFestival])
  @@index([jeuxIdGame])
}

enum Role {
  administrator
  receptionManager
  referent
  basic
}

model Creneau {
  idCreneau     Int             @id @default(autoincrement())
  timeStart     DateTime
  timeEnd       DateTime
  idFestival    Int
  festival      Festival        @relation(fields: [idFestival], references: [idFestival], onDelete: Cascade)
  creneauEspace CreneauEspace[]

  @@index([idFestival])
}

model Poste {
  idPoste       Int           @id @default(autoincrement())
  name          String
  description   String        @db.Text
  capacityPoste Int
  idFestival    Int
  festival      Festival      @relation(fields: [idFestival], references: [idFestival], onDelete: Cascade)
  posteEspaces  PosteEspace[]

  @@index([idFestival])
}

model Espace {
  idEspace       Int             @id @default(autoincrement())
  name           String
  posteEspaces   PosteEspace[]
  creneauEspaces CreneauEspace[]
  isReferent     IsReferent[]
}

model PosteEspace {
  idPoste  Int
  idEspace Int
  poste    Poste  @relation(fields: [idPoste], references: [idPoste], onDelete: Cascade)
  espace   Espace @relation(fields: [idEspace], references: [idEspace], onDelete: Cascade)

  @@id([idPoste, idEspace])
  @@index([idEspace])
  @@index([idPoste])
}

model IsReferent {
  idUser     String
  idEspace   Int
  user       User   @relation(fields: [idUser], references: [id], onDelete: Cascade)
  espace     Espace @relation(fields: [idEspace], references: [idEspace], onDelete: Cascade)
  Jeux       Jeux?  @relation(fields: [jeuxIdGame], references: [idGame], onDelete: Cascade)
  jeuxIdGame Int?

  @@id([idUser, idEspace])
  @@index([idUser])
  @@index([idEspace])
  @@index([jeuxIdGame])
}

model CreneauEspace {
  idCreneauEspace             Int           @id @default(autoincrement())
  idCreneau                   Int
  idEspace                    Int
  currentCapacity             Int           @default(0)
  capacityEspaceAnimationJeux Int           @default(2)
  creneau                     Creneau       @relation(fields: [idCreneau], references: [idCreneau], onDelete: Cascade)
  espace                      Espace        @relation(fields: [idEspace], references: [idEspace], onDelete: Cascade)
  inscriptions                Inscription[]

  @@index([idCreneau])
  @@index([idEspace])
}

model Inscription {
  idUser          String
  idCreneauEspace Int
  isAccepted      Boolean
  isFlexible      Boolean // Pas obligatoire?
  user            User          @relation(fields: [idUser], references: [id])
  creneauEspace   CreneauEspace @relation(fields: [idCreneauEspace], references: [idCreneauEspace])
  Jeux            Jeux?         @relation(fields: [jeuxIdGame], references: [idGame])
  jeuxIdGame      Int?

  @@id([idUser, idCreneauEspace])
  @@index([idCreneauEspace])
  @@index([idUser])
  @@index([jeuxIdGame])
}

model IsPresent {
  idFestival Int
  idUser     String
  date       DateTime
  festival   Festival @relation(fields: [idFestival], references: [idFestival], onDelete: Cascade)
  user       User     @relation(fields: [idUser], references: [id])
  Jeux       Jeux?    @relation(fields: [jeuxIdGame], references: [idGame])
  jeuxIdGame Int?

  @@id([idFestival, idUser, date])
  @@index([idFestival])
  @@index([idUser])
  @@index([jeuxIdGame])
}

model Event {
  idEvent     Int           @id @default(autoincrement())
  dateEvent   DateTime
  duration    Int
  address     String
  city        String
  postalCode  String
  country     String
  name        String
  idManager   String?
  description String?       @db.Text
  manager     User?         @relation("manager", fields: [idManager], references: [id], onDelete: SetNull)
  isPresented IsPresented[]

  @@index([idManager])
}

model IsPresented {
  idGame  Int
  idEvent Int
  game    Jeux  @relation(fields: [idGame], references: [idGame], onDelete: Cascade)
  event   Event @relation(fields: [idEvent], references: [idEvent], onDelete: Cascade)

  @@id([idGame, idEvent])
  @@index([idGame])
  @@index([idEvent])
}

model UserAssociation {
  idUser        String
  idAssociation Int
  user          User        @relation(fields: [idUser], references: [id], onDelete: Cascade)
  association   Association @relation(fields: [idAssociation], references: [idAssociation], onDelete: Cascade)

  @@id([idUser, idAssociation])
  @@index([idUser])
  @@index([idAssociation])
}

model Association {
  idAssociation    Int               @id @default(autoincrement())
  name             String
  userAssociations UserAssociation[]
}

model Jeux {
  idGame          Int      @id
  name            String
  author          String? // Ajouté, facultatif si non toujours présent
  publisher       String? // Ajouté, facultatif si non toujours présent
  numberOfPlayers String? // Ajouté, facultatif si non toujours présent
  minAge          String? // Ajouté, facultatif si non toujours présent
  duration        String? // Ajouté, facultatif si non toujours présent
  type            String? // Ajouté, facultatif si non toujours présent
  instructionLink String?  @db.Text // Ajouté, facultatif si non toujours présent
  playArea        String? // Ajouté, facultatif si non toujours présent
  volunteerArea   String? // Ajouté, facultatif si non toujours présent
  idZone          Int?
  toAnimate       Boolean? // Ajouté, facultatif si non toujours présent
  received        Boolean? // Ajouté, facultatif si non toujours présent
  mechanisms      String?  @db.Text // Ajouté, facultatif si non toujours présent
  themes          String? // Ajouté, facultatif si non toujours présent
  tags            String? // Ajouté, facultatif si non toujours présent
  description     String?  @db.Text
  imageUrl        String?  @db.Text
  logoUrl         String?  @db.Text
  videoUrl        String?  @db.Text

  // Relations existantes
  isPresented  IsPresented[]
  isPlay       IsPlay[]
  isVolunteer  IsVolunteer[]
  isReferent   IsReferent[]
  isPresent    IsPresent[]
  inscriptions Inscription[]
}

model IsPlay {
  idGame     Int
  idFestival Int
  game       Jeux     @relation(fields: [idGame], references: [idGame], onDelete: Cascade)
  festival   Festival @relation(fields: [idFestival], references: [idFestival], onDelete: Cascade)

  @@id([idGame, idFestival])
  @@index([idGame])
  @@index([idFestival])
}
