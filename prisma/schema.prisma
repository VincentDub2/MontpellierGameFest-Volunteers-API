datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String   @id @default(uuid())
  name                   String
  email                  String   @unique
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  emailVerified          Boolean  @default(false)
  emailVerificationToken String? // Un token unique pour la vérification d'email

  // Relations
  authLocal           AuthLocal?
  authOAuth           AuthOAuth[]
  passwordResetTokens PasswordResetToken[]

  isVolunteer isVolunteer[]
  isPresent   isPresent[]
}

model AuthLocal {
  id             String    @id @default(uuid())
  hashedPassword String
  salt           String
  failedAttempts Int       @default(0)
  lockUntil      DateTime? // Verrouillage du compte jusqu'à cette date

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthOAuth {
  id             String  @id @default(uuid())
  providerId     String
  provider       String
  providerUserId String
  accessToken    String  @db.VarChar(500)
  refreshToken   String?
  userId         String
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasswordResetToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  userId String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Job {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Space {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TimeSlot {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Fest {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  isPresent   isPresent[]
  isVolunteer isVolunteer[]
}

model Register {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model isReferent {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model isVolunteer {
  userId      String // Clé étrangère pour User
  festId      Int // Clé étrangère pour Fest
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  fest Fest @relation(fields: [festId], references: [id])

  @@id([userId, festId]) // Clé primaire composite
  @@index([userId]) // Ajout d'un index sur userId
  @@index([festId]) // Ajout d'un index sur festId
}

model isReceptionManager {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model isPresent {
  userId    String // Clé étrangère pour User
  festId    Int // Clé étrangère pour Fest
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  fest Fest @relation(fields: [festId], references: [id])

  @@id([userId, festId]) // Clé primaire composite
  @@index([userId]) // Ajout d'un index sur userId
  @@index([festId]) // Ajout d'un index sur festId
}
